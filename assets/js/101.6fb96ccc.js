(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{591:function(_,v,t){"use strict";t.r(v);var e=t(26),a=Object(e.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"网络层的功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络层的功能"}},[_._v("#")]),_._v(" 网络层的功能")]),_._v(" "),t("p",[_._v("互联网早网络层的设计思路是，向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。也就是说所传送的分组出错、丢失、重复、失序或超时，这就使得网络中的路由器比较简单，而且价格低廉。如果主机中的进程之间的通信需要是可靠的，那么可以由更高层的传输层负责。采用这种设计思路的好处是：网络的造价大大降低，运行方式灵活，能够适应多种应用。互联网能够发展到今日的规模，充分证明了当初采用这种设计思想的正确性。")]),_._v(" "),t("h3",{attrs:{id:"异构网络互联"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异构网络互联"}},[_._v("#")]),_._v(" 异构网络互联")]),_._v(" "),t("p",[_._v("要在全球范围内把数以百万计的网络互联起来，并且能够互相通信，是一项非常复杂的任务，此时需要解决许多问题，比如不同的寻址方案、不同的网络接入机制、不同的差错处理方法、不同的路由选择机制等。用户的需求是多样的，没有一种单一的网络能适应所有用户的需求。网络层所要完成的任务之一就是使这些异构的网络实现互联。所谓网络互联，是指将两个以上的计算机网络，通过一定的方法，用一种或多种通信处理设备（即中间设备）相互连接起来，以构成更大的网络系统。中间设备又称中间系统或中继系统。根据所在的层次，中继系统分为以下 4 种")]),_._v(" "),t("ol",[t("li",[_._v("物理层中继系统：中继器，集线器（Hub）")]),_._v(" "),t("li",[_._v("数据链路层中继系统：网桥或交换机")]),_._v(" "),t("li",[_._v("网络层中继系统：路由器")]),_._v(" "),t("li",[_._v("网络层以上的中继系统：网关")])]),_._v(" "),t("p",[_._v("使用物理层或数据链路层的中继系统时，只是把一个网络扩大了，而从网络层的角度看，它仍然是同一个网络，一般并不称之为网络互联。因此网络互联通常是指用路由器进行网络互联和路由选择。路由器是一台专用计算机，用于在互联网中进行路由选择。")]),_._v(" "),t("blockquote",[t("p",[_._v("注意：由于历史原因，许多有关 TCP/IP 的文献也把网络层的路由器称为网关")])]),_._v(" "),t("p",[_._v("TCPIP 体系在网络互联上采用的做法是在网络层（即 IP 层）采用标准化协议，但相互连接的网络可以是异构的。许多计算机网络通过一些路由器进行的互联。由于参加互联的计算机网络都使用相同的网际协议（Internet Protocol，IP），因此可以把互联后的计算机网络视为一个虚拟 IP 网络。")]),_._v(" "),t("p",[_._v("虚拟互联网络也就是逻辑互联网络，即互联起来的各种物理网络的异构性本来是客观存在的，但是通过使用 IP 就可以使这些性能各异的网络在网络层上看起来好像是一个统一的网络。这种使用 IP 的虚拟互联网络可简称为 IP 网络。")]),_._v(" "),t("p",[_._v("使用虚拟互联网络的好处是：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互联的具体的网络异构细节（如具体的编址方案、路由选择协议等）。")]),_._v(" "),t("h3",{attrs:{id:"路由与转发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由与转发"}},[_._v("#")]),_._v(" 路由与转发")]),_._v(" "),t("p",[_._v("路由器主要完成两个功能：一是路由选择（确定哪一条路径），二是分组转发（当一个分组到达时所采取的动作）。前者是根据特定的路由选择协议构造出路由表，同时经常或定期地和相邻路由器交换路由信息而不断地更新和维护路由表。后者处理通过路由器的数据流，关键操作是转发表查询、转发及相关的队列管理和任务调度等。")]),_._v(" "),t("ol",[t("li",[_._v("路由选择。指按照复杂的分布式算法，根据从各相邻路由器所得到的关于整个网络拓扑的变化情况，动态地改变所选择的路由。")]),_._v(" "),t("li",[_._v("分组转发。转发功能分为两类。一是指路由器根据转发表将用户的 IP 数据报从合适的端口转发出去；二是 SDN（Software Defined NetWork） 方式")])]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/AtlanSI/article/details/95613225",target:"_blank",rel:"noopener noreferrer"}},[_._v("SDN 介绍（什么是 SDN）"),t("OutboundLink")],1)])]),_._v(" "),t("p",[_._v("路由表是根据路由选择算法得出的，而转发表是从路由表得出的。转发表的结构应当使查找过程最优化，路由表则需要对网络拓扑变化的计算最优化。在讨论路由选择的原理时，往往不去区分转发表和路由表，而是笼统地使用路由表一词。")]),_._v(" "),t("h3",{attrs:{id:"拥塞控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制"}},[_._v("#")]),_._v(" 拥塞控制")]),_._v(" "),t("p",[_._v("在通信子网中，因出现过量的分组而引起网络性能下降的现象称为"),t("strong",[_._v("拥塞")]),_._v(" 。例如，某个路由器所在链路的带宽为 R B/s，如果 IP 分组只从它的某个端口进入，那么其速率为 r"),t("sub",[_._v("in")]),_._v(" B/s。当 r"),t("sub",[_._v("in")]),_._v('=R 时，可能看起来是件"好事"，因为链路带宽被充分利用。但是，当分组到达时延路由器的速率接近 R 时，平均时延急剧增加，并且会有大量的分组被丢弃（路由器端口的缓冲区是有限的），整个网络的吞吐量会骤降，源与目的地之间的平均时延也会变得近乎无穷大。')]),_._v(" "),t("p",[_._v("判断网络是否进入拥塞状态的方法是，观察网络的吞吐量与网络负载的关系：如果随着网络负载的增加，网络的吞吐量明显小于正常的吞吐量，那么网络就可能已进入“轻度拥塞”状态；如果网络的吞吐量随着网络负载的增大而下降，那么网络就可能已进入拥塞状态；如果网络的负载继续增大，而网络的吞吐量下降到零，那么网络就可能已进入死锁状态。")]),_._v(" "),t("p",[_._v("为避免拥塞现象的出现，要采用能防止拥塞的一系列方法对子网进行拥塞控制。拥塞控制主要解决的问题是如何获取网络中发生拥塞的信息，从而利用这些信息进行控制，以避免由于拥塞而出现分组的丢失，以及严重拥塞而产生网络死锁的现象。")]),_._v(" "),t("p",[_._v("拥塞控制的作用是确保子网能够承载所达到的流量，这是一个全局性的过程，涉及各方面的行为；主机、路由器及路由器内部的转发处理过程等。单一地增加资源并不能解决拥塞。")]),_._v(" "),t("p",[_._v("流量控制和拥塞控制的区别：流量控制往往是指在发送端和接收端之间的点对点通信量的控制。流量控制所要做的是抑制发送端发送数据的速率，以便使接收端来得及接收。而拥塞控制必须确保通信子网能够传送待传送的数据，是一个全局性的问题，涉及网络中所有的主机、路由器及导致网络传输能力下降的所有因素。")]),_._v(" "),t("p",[_._v("拥塞控制的方法有两种")]),_._v(" "),t("ol",[t("li",[t("p",[t("strong",[_._v("开环控制")]),_._v(" 。在设计网络时事先将有关发生拥塞的因素考虑周到，力求网络在工作时不产生拥塞。这是一种静态的预防方法。一旦整个系统启动并运行，中途就不再需要修改。开环控制手段包括确定何时可接收新流量、何时可丢弃分组及丢弃哪些分组，确定何种调度决策等。所有这些手段的共性是，在做决定时不考虑当前网络的状态。")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("闭环控制")]),_._v(" 。事先不考虑有关发生拥塞的各种因素，采用监测网络系统去监视，及时检测哪里发生了拥塞，然后将拥塞信息传到合适的地方，以便调整网络系统的运行，并解决出现的问题。闭环控制是基于反馈环路的概念，是一种动态的方法。")])])]),_._v(" "),t("h2",{attrs:{id:"路由算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由算法"}},[_._v("#")]),_._v(" 路由算法")]),_._v(" "),t("h3",{attrs:{id:"静态路由与动态路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态路由与动态路由"}},[_._v("#")]),_._v(" 静态路由与动态路由")]),_._v(" "),t("p",[_._v("路由器转发分组是通过路由表转发的，而路由表是通过各种算法得到的。从能否随网络的通信量或拓扑自适应地进行调整变化来划分，路由算法可分为如下两大类。")]),_._v(" "),t("p",[t("strong",[_._v("静态路由算法")]),_._v(" （又称非自适应路由算法）。指由网络管理员手工配置的路由信息。当网络的拓扑结构或链路的状态发生变化时，网络管理员需要手工去修改路由表中相关的静态路由信息。大型和复杂的网络环境通常不宜采用静态路由。一方面，网络管理员难以全面了解整个网络的拓扑结构；另一方面，当网络的拓扑结构和链路状态发生变化时，路由器中的静态路由信息需要大范围地调整，这一工作的难度和复杂程度非常高。对于简单的小型网络，可以采用静态路由。")]),_._v(" "),t("p",[t("strong",[_._v("动态路由算法")]),_._v(" （又称自适应路由算法）。指路由器上的路由表项是通过相互连接的路由器之间彼此交换信息，然后按照一定的算法优化出来的，而这些路由信息会在一定时间间隙里不断更新，以适应不断变化的网络，随时获得最优的寻路效果。")]),_._v(" "),t("p",[_._v("静态路由算法的特点是简便和开销较小，在拓扑变化不大的网络中运行效果很好，因此仍广泛用于高度安全的军事系统和较小的商业网络。动态路由算法能改善网络的性能并有助于流量控制；但算法复杂，会增加网络的负担，有时因对动态变化的反应太快而引起振荡，或反应太慢而影响网络路由的一致性，因此要仔细设计动态路由算法，以发挥其优势。常用的动态路由算法可分为两类 ∶ 距离-向量路由算法和链路状态路由算法。")]),_._v(" "),t("h3",{attrs:{id:"距离-向量路由算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#距离-向量路由算法"}},[_._v("#")]),_._v(" 距离-向量路由算法")]),_._v(" "),t("p",[_._v("在距离-向量路由算法中，所有结点都定期地将它们的整个路由选择表传送给所有与之直接相邻的结点。这种路由选择表包含：")]),_._v(" "),t("ul",[t("li",[_._v("每条路径的目的地（另一结点）。")]),_._v(" "),t("li",[_._v("路径的代价（也称距离）。")])]),_._v(" "),t("p",[_._v("注意：这里的距离是一个抽象的概念，如 RIP 就将距离定义为“跳数”。跳数指从源端口到达目的端口所经过的路由个数，每经过一个路由器，跳数加 1。")]),_._v(" "),t("p",[_._v("在这种算法中，所有结点都必须参与距离向量交换，以保证路由的有效性和一致性，也就是说，所有的结点都监听从其他结点传来的路由选择更新信息，并在下列情况下更新它们的路由选择表：")]),_._v(" "),t("ol",[t("li",[_._v("被通告一条新的路由，该路由在本结点的路由表中不存在，此时本地系统加入这条新的路由。")]),_._v(" "),t("li",[_._v("发来的路由信息中有一条到达某个目的地的路由，该路由与当前使用的路由相比，有较短的距离（较小的代价）。此种情况下，就用经过发送路由信息的结点的新路由替换路由表中到达那个目的地的现有路由。")])]),_._v(" "),t("p",[_._v("距离-向量路由算法的实质是，迭代计算一条路由中的站段数或延迟时间，从而得到到达一个目标的最短（最小代价）通路。它要求每个结点在每次更新时都将它的全部路由表发送给所有相邻的结点。显然，更新报文的大小与通信子网的结点个数成正比，大的通信子网将导致很大的更新报文。由于更新报文发给直接邻接的结点，所以所有结点都将参加路由选择信息交换。基于这些原因，在通信子网上传送的路由选择信息的数量很容易变得非常大。")]),_._v(" "),t("p",[_._v("最常见的距离-向量路由算法是 RIP 算法，它采用“跳数”作为距离的度量。")]),_._v(" "),t("h3",{attrs:{id:"链路状态路由算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链路状态路由算法"}},[_._v("#")]),_._v(" 链路状态路由算法")]),_._v(" "),t("p",[_._v("链路状态路由算法要求每个参与该算法的结点都具有完全的网络拓扑信息，它们执行下述两项任务。第一，主动测试所有邻接结点的状态。两个共享一条链接的结点是相邻结点，它们连接到同一条链路，或者连接到同一广播型物理网络。第二，定期地将链路状态传播给所有其他结点（或称路由结点）。典型的链路状态算法是 OSPF 算法。")]),_._v(" "),t("p",[_._v("在一个链路状态路由选择中，一个结点检查所有直接链路的状态，并将所得的状态信息发送给网上的所有其他结点，而不是仅送给那些直接相连的结点。每个结点都用这种方式从网上所有其他的结点接收包含直接链路状态的路由选择信息。")]),_._v(" "),t("p",[_._v("每当链路状态报文到达时，路由结点便使用这些状态信息去更新自己的网络拓扑和状态“视野图”，一旦链路状态发生变化，结点就对更新的网络图利用 Dijsktra 最短路径算法重新计算路由，从单一的源出发计算到达所有目的结点的最短路径。")]),_._v(" "),t("p",[_._v("链路状态路由算法主要有三个特征")]),_._v(" "),t("ol",[t("li",[_._v("向"),t("a",{attrs:{href:"#hierarchical_routing"}},[_._v("本自治系统")]),_._v("中所有路由器发送信息，这里使用的方法是泛洪法，即路由器通过所有端口向所有相邻的路由器发送信息。而每个相邻路由器又将此信息发往其所有相邻路由器（但不再发送给刚刚发来信息的那个路由器）。")]),_._v(" "),t("li",[_._v("发送的信息是与路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。所谓“链路状态”，是指说明本路由器与哪些路由器相邻及该链路的“度量”。对于 OSPF 算法，链路状态的“度量”主要用来表示费用、距离、时延、带宽等。")]),_._v(" "),t("li",[_._v("只有当链路状态发生变化时，路由器才向所有路由器发送此消息。")])]),_._v(" "),t("p",[_._v("由于一个路由器的链路状态只涉及相邻路由器的连通状态，而与整个互联网的规模并无直接关系，因此链路状态路由算法可以用于大型的或路由信息变化聚敛的互联网环境。")]),_._v(" "),t("p",[_._v("链路状态路由算法的主要优点是，每个路由结点都使用同样的原始状态数据独立地计算路径，而不依赖中间结点的计算;链路状态报文不加改变地传播，因此采用该算法易于查找故障。当一个结点从所有其他结点接收到报文时，它可以在本地立即计算正确的通路，保证一步汇聚。最后，由于链路状态报文仅运载来自单个结点关于直接链路的信息，其大小与网络中的路由结点数目无关，因此链路状态算法比距离-向量算法有更好的规模可伸展性。")]),_._v(" "),t("p",[_._v("距离-向量路由算法与链路状态路由算法的比较：在距离-向量路由算法中，每个结点仅与它的直接邻居交谈，它为它的邻居提供从自己到网络中所有其他结点的最低费用估计。在链路状态路由算法中，每个结点通过广播的方式与所有其他结点交谈，但它仅告诉它们与它直接相连的链路的费用。相较之下，距离-向量路由算法有可能遇到路由环路等问题。")]),_._v(" "),t("div",{attrs:{id:"hierarchical_routing"}}),_._v(" "),t("h3",{attrs:{id:"层次路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#层次路由"}},[_._v("#")]),_._v(" 层次路由")]),_._v(" "),t("p",[_._v("当网络规模扩大时，路由器的路由表成比例地增大。这不仅会消耗越来越多的路由器缓冲区空间，而且需要用更多 CPU 时间来扫描路由表，用更多的带宽来交换路由状态信息。因此路由选择必须按照层次的方式进行。因特网将整个互联网划分为许多较小的自治系统（注意一个自治系统中包含很多局域网），每个自治系统有权自主地决定本系统内应采用何种路由选择协议。如果两个自治系统需要通信，那么就需要一种在两个自治系统之间的协议来屏蔽这些差异。据此，因特网把路由选择协议划分为两大类 ：")]),_._v(" "),t("ol",[t("li",[_._v("一个自治系统内部所使用的路由选择协议称为内部网关协议（IGP），也称域内路由选择，具体的协议有 RIP 和 OSPF 等。")]),_._v(" "),t("li",[_._v("自治系统之间所使用的路由选择协议称为外部网关协议（EGP），也称域间路由选择，用在不同自治系统的路由器之间交换路由信息，并负责为分组在不同自治系统之间选择最优的路径。具体的协议有 BGP。")])]),_._v(" "),t("p",[_._v("使用层次路由时，OSPF 将一个自治系统再划分为若干区域（Area），每个路由器都知道在本区域内如何把分组路由到目的地的细节，但不用知道其他区域的内部结构。采用分层次划分区域的方法虽然会使交换信息的种类增多，但也会使 OSPF 协议更加复杂。但这样做却能使每个区域内部交换路由信息的通信量大大减小，因而使 OSPF 协议能够用于规模很大的自治系统中。")]),_._v(" "),t("h2",{attrs:{id:"路由协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由协议"}},[_._v("#")]),_._v(" 路由协议")]),_._v(" "),t("h3",{attrs:{id:"自治系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自治系统"}},[_._v("#")]),_._v(" 自治系统")]),_._v(" "),t("p",[_._v("自治系统（Autonomous System，AS）：单一技术管理下的一组路由器，这些路由器使用一种 AS 内部的路由选择协议和共同的度量来确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议来确定分组在 AS 之间的路由。一个自治系统内的所有网络都由一个行政单位（如一家公司、一所大学、一个政府部门等）管辖，一个自治系统的所有路由器在本自治系统内都必须是连通的。")]),_._v(" "),t("h3",{attrs:{id:"域内路由与域间路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#域内路由与域间路由"}},[_._v("#")]),_._v(" 域内路由与域间路由")]),_._v(" "),t("p",[_._v("自治系统内部的路由选择称为域内路由选择，自治系统之间的路由选择称为域间路由选择。因特网有两大类路由选择协议。")]),_._v(" "),t("p",[t("strong",[_._v("1. 内部网关协议（Interior Gateway Protocol，IGP）")])]),_._v(" "),t("p",[_._v("内部网关协议即在一个自治系统内部使用的路由选择协议，它与互联网中其他自治系统选用什么路由选择协议无关。目前这类路由选择协议使用得最多，如 RIP 和 OSPF。")]),_._v(" "),t("p",[t("strong",[_._v("2. 外部同关协议（External Gateway Protocol，EGP）")])]),_._v(" "),t("p",[_._v("若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时（两个自治系统可能使用不同的 IGP），就需要使用一种协议将路由选择信息传递到另一个自治系统中。这样的协议就是外部网关协议（EGP）。目前使用最多的外部网关协议是 BGP-4。")]),_._v(" "),t("p",[_._v("每个自治系统自己决定在本自治系统内部运行哪个内部路由选择协议（例如，可以是 RIP，也可以是 OSPF），但每个自治系统都有一个或多个路由器。除运行本系统的内部路由选择协议外，还要运行自治系统间的路由选择协议（如 BGP-4）。")]),_._v(" "),t("h3",{attrs:{id:"路由信息协议-rip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由信息协议-rip"}},[_._v("#")]),_._v(" 路由信息协议（RIP）")]),_._v(" "),t("p",[_._v("路由信息协议（Routing InformationProtocol，RIP）是内部网关协议（IGP）中最先得到广泛应用的协议。RIP 是一种分布式的基于距离向量的路由选择协议，其最大优点就是简单。")]),_._v(" "),t("p",[t("strong",[_._v("1. RIP 规定")])]),_._v(" "),t("ol",[t("li",[_._v("网络中的每个路由器都要维护从它自身到其他每个目的网络的距离记录（因此这是一组距离，称为距离向量）。")]),_._v(" "),t("li",[_._v("距离也称跳数（Hop Count），规定从一个路由器到直接连接网络的距离（跳数）为 1。而经过一个路由器，距离（跳数）加 1。")]),_._v(" "),t("li",[_._v("RIP 认为好的路由就是它通过的路由器的数目少，即优先选择跳数少的路径。")]),_._v(" "),t("li",[_._v("RIP 允许一条路径最多只能包含 15 个路由器（即最多允许 15 跳）。因此距离等于 16 时，它表示网络不可达。可见 RIP 只适用于小型互联网。距离向量路由可能会出现环路的情况，规定路径上的最高跳数的目的是为了防止数据报不断循环在环路上，减少网络拥塞的可能性。")]),_._v(" "),t("li",[_._v("RIP 默认在任意两个使用 RIP 的路由器之间每 30 秒广播一次 RIP 路由更新信息，以便自动建立并维护路由表（动态维护）。")]),_._v(" "),t("li",[_._v("在 RIP 中不支持子网掩码的 RIP 广播，所以 RIP 中每个网络的子网掩码必须相同。但在新的 RIP2 中，支持变长子网掩码和 CIDR。")])]),_._v(" "),t("p",[t("strong",[_._v("2. RIP 的特点（注意与 OSPF 的特点比较）")])]),_._v(" "),t("ol",[t("li",[_._v("仅和相邻路由器交换信息。")]),_._v(" "),t("li",[_._v("路由器交换的信息是当前路由器所知道的全部信息，即自己的路由表。")]),_._v(" "),t("li",[_._v("按固定的时间间隔交换路由信息，如每隔 30 秒。")])]),_._v(" "),t("p",[_._v("RIP 通过距离向量算法来完成路由表的更新。最初，每个路由器只知道与自己直接相连的网络。通过每 30 秒的 RIP 广播，相邻两个路由器相互将自己的路由表发给对方。于是经过第一次 RIP 广播，每个路由器就知道了与自己相邻的路由器的路由表（即知道了距离自己跳数为 1 的网络的路由）。同理，经过第二次 RIP 广播，每个路由器就知道了距离自己跳数为 2 的网络的路由……因此经过若干 RIP 广播后，所有路由器都最终知道了整个 IP 网络的路由表，成为 RIP 最终是收敛的。通过 RIP 收敛后，每个路由器到每个目标网络的路由都是距离最短的（即跳数最少，最短路由），哪怕还存在另一条高速（低时延）但路由器较多的路由。")]),_._v(" "),t("p",[t("strong",[_._v("3. 距离向量算法")])]),_._v(" "),t("p",[_._v("每个路由表项目都有三个关键数据："),t("code",[_._v("<目的网络 N，距离 d，下一跳路由器 X>")]),_._v("。对于每个相邻路由器发送过来的 RIP 报文，执行如下步骤 ∶")]),_._v(" "),t("ul",[t("li",[_._v("对地址为 X 的相邻路由器发来的 RIP 报文，先修改此报文中的所有项目：把“下一跳”字段中的地址都改为 X，并把所有“距离”字段的值加 1。")]),_._v(" "),t("li",[_._v("对修改后的 RIP 报文中的每个项目，执行如下步骤\n"),t("ul",[t("li",[_._v("当原来的路由表中没有目的网络 N 时，把该项目添加到路由表中。")]),_._v(" "),t("li",[_._v("当原来的路由表中有目的网络 N，且下一跳路由器的地址是 X 时，用收到的项目替换原路由表中的项目。")]),_._v(" "),t("li",[_._v("当原来的路由表中有目的网络 N，且下一跳路由器的地址不是 X 时，如果收到的项目中的距离 d 小于路由表中的距离，那么就用收到的项目替换原路由表中的项目；否则什么也不做。")])])]),_._v(" "),t("li",[_._v("如果 180 秒（RIP 默认超时时间为 180 秒）还没有收到相邻路由器的更新路由表，那么把此相邻路由器记为不可达路由器，即把距离设置为 16（距离为 16 表示不可达）。")]),_._v(" "),t("li",[_._v("返回。")])]),_._v(" "),t("p",[_._v("RIP 最大的优点是实现简单、开销小、收敛过程较快。RIP 的缺点如下")]),_._v(" "),t("ol",[t("li",[_._v("RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。")]),_._v(" "),t("li",[_._v("路由器之间交换的是路由器中的完整路由表，因此网络规模越大，开销也越大。")]),_._v(" "),t("li",[_._v('网络出现故障时，会出现慢收敛现象（即需要较长时间才能将此信息传送到所有路由器），俗称"坏消息传得慢"，使更新过程的收敛时间长。')])]),_._v(" "),t("p",[_._v("RIP 是应用层协议，它使用 UDP 传送数据（端口 520）。RIP 选择的路径不一定是时间最短的，但一定是具有最少路由器的路径。因为它是根据最少的跳数进行路径选择的。")]),_._v(" "),t("h3",{attrs:{id:"开放最短路径优先-ospf-协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开放最短路径优先-ospf-协议"}},[_._v("#")]),_._v(" 开放最短路径优先（OSPF）协议")]),_._v(" "),t("p",[t("strong",[_._v("1. OSPF 协议的基本特点")])]),_._v(" "),t("p",[_._v("开放最短路径优先（OSPF）协议是使用分布式链路状态路由算法的典型代表，也是内部网关协议（IGP）的一种。OSPF 与 RIP 相比有以下 4 点主要区别")]),_._v(" "),t("ol",[t("li",[_._v("OSPF 向本自治系统中的所有路由器发送信息，这里使用的方法是洪泛法。而 RIP 仅向自己相邻的几个路由器发送信息。")]),_._v(" "),t("li",[_._v("发送的信息是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。“链路状态”说明本路由器和哪些路由器相邻及该链路的“度量”（或代价）。而在 RIP 中，发送的信息是本路由器所知道的全部信息，即整个路由表。")]),_._v(" "),t("li",[_._v("只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息，并且更新过程收敛得快，不会出现 RIP“坏消息传得慢”的问题。而在 RIP 中，不管网络拓扑是否发生变化，路由器之间都会定期交换路由表的信息。")]),_._v(" "),t("li",[_._v("OSPF 是网络层协议，它不使用 UDP 或 TCP，而直接用 IP 数据报传送（其 IP 数据报首部的协议字段为 89）。而 RIP 是应用层协议，它在传输层使用 UDP。")])]),_._v(" "),t("p",[_._v("除以上区别外，OSPF 还有以下特点")]),_._v(" "),t("ol",[t("li",[_._v("OSPF 对不同的链路可根据 IP 分组的不同服务类型（TOS）而设置成不同的代价。因此，OSPF 对于不同类型的业务可计算出不同的路由，十分灵活。")]),_._v(" "),t("li",[_._v("如果到同一个目的网络有多条相同代价的路径，那么可以将通信量分配给这几条路径。这称为多路径间的负载平衡。")]),_._v(" "),t("li",[_._v("所有在 OSPF 路由器之间交换的分组都具有鉴别功能，因而保证了仅在可信赖的路由器之间交换链路状态信息。")]),_._v(" "),t("li",[_._v("支持可变长度的子网划分和无分类编址 CIDR。")]),_._v(" "),t("li",[_._v("每个链路状态都带上一个 32 位的序号，序号越大，状态就越新。")])]),_._v(" "),t("p",[t("strong",[_._v("2. OSPF 的基本工作原理")])]),_._v(" "),t("p",[_._v("由于各路由器之间频繁地交换链路状态信息，因此所有路由器最终都能建立一个链路状态数据库。这个数据库实际上就是全网的拓扑结构图，它在全网范围内是一致的（称为链路状态数据库的同步）。然后，每个路由器根据这个全网拓扑结构图，使用 Dijkstra 最短路径算法计算从自己到各目的网络的最优路径，以此构造自己的路由表。此后，当链路状态发生变化时，每个路由器重新计算到各目的网络的最优路径，构造新的路由表。")]),_._v(" "),t("p",[_._v("注意：虽然使用 Dijkstra 算法能计算出完整的最优路径，但路由表中不会存储完整路径，而只存储“下一跳”（只有到了下一跳路由器，才能知道再下一跳应当怎样走）。")]),_._v(" "),t("p",[_._v("为使 OSPF 能够用于规模很大的网络，OSPF 将一个自治系统再划分为若干更小的范围，称为区域。划分区域的好处是，将利用洪泛法交换链路状态信息的范围局限于每个区域而非整个自治系统，减少了整个网络上的通信量。在一个区域内部的路由器只知道本区域的完整网络拓扑，而不知道其他区域的网络拓扑情况。这些区域也有层次之分。处在上层的域称为主千区域，负责连通其他下层的区域，并且还连接其他自治域。")]),_._v(" "),t("p",[t("strong",[_._v("3. OSPF 的五种分组类型")])]),_._v(" "),t("p",[_._v("OSPF 共有以下五种分组类型")]),_._v(" "),t("ol",[t("li",[_._v("问候分组，用来发现和维持邻站的可达性。")]),_._v(" "),t("li",[_._v("数据库描述分组，向邻站给出自己的链路状态数据库中的所有链路状态项目的摘要信息。")]),_._v(" "),t("li",[_._v("链路状态请求分组，向对方请求发送某些链路状态项目的详细信息。")]),_._v(" "),t("li",[_._v("链路状态更新分组，用洪泛法对全网更新链路状态。")]),_._v(" "),t("li",[_._v("链路状态确认分组，对链路更新分组的确认。")])]),_._v(" "),t("p",[_._v("通常每隔 10 秒，每两个相邻路由器要交换一次问候分组，以便知道哪些站可达。在路由器刚开始工作时，OSPF 让每个路由器使用数据库描述分组和相邻路由器交换本数据库中已有的链路状态摘要信息。然后，路由器使用链路状态请求分组，向对方请求发送自己所缺少的某些链路状态项目的详细信息。经过一系列的这种分组交换，就建立了全网同步的链路数据库。")]),_._v(" "),t("p",[_._v("在网络运行的过程中，只要一个路由器的链路状态发生变化，该路由器就要使用链路状态更新分组，用洪泛法向全网更新链路状态。其他路由器在更新后，发送链路状态确认分组对更新分组进行确认。")]),_._v(" "),t("p",[_._v("为了确保链路状态数据库与全网的状态保持一致，OSPF 还规定每隔一段时间（如 30 分钟）就刷新一次数据库中的链路状态。由于一个路由器的链路状态只涉及与相邻路由器的连通状态，因而与整个互联网的规模并无直接关系。因此，当互联网规模很大时，OSPF 要比 RIP 好得多，而且 OSPF 协议没有“坏消息传播得慢”的问题。")]),_._v(" "),t("p",[_._v("注意：OSPF 协议不使用 UDP 数据报传送，而是直接使用 IP 数据报传送，在此解释一下什么称为用 UDP 传送，什么称为用 IP 数据报传送。用 UDP 传送是指将该信息作为 UDP 报文的数据部分，而直接使用 IP 数据报传送是指将该信息直接作为 IP 数据报的数据部分。RIP 报文是作为 UDP 数据报的数据部分。")]),_._v(" "),t("h3",{attrs:{id:"边界网关协议-bgp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#边界网关协议-bgp"}},[_._v("#")]),_._v(" 边界网关协议（BGP）")]),_._v(" "),t("p",[_._v("边界网关协议（Border Gateway Protocol，BGP）是不同自治系统的路由器之间交换路由信息的协议，是一种外部网关协议。边界网关协议常用于互联网的网关之间。路由表包含已知路由器的列表、路由器能够达到的地址及到达每个路由器的路径的跳数。")]),_._v(" "),t("p",[_._v("内部网关协议主要设法使数据报在一个 AS 中尽可能有效地从源站传送到目的站。在一个 AS 内部不需要考虑其他方面的策略。然而 BGP 使用的环境却不同，主要原因如下")]),_._v(" "),t("ol",[t("li",[_._v("因特网的规模太大，使得自治系统之间路由选择非常困难。")]),_._v(" "),t("li",[_._v("对于自治系统之间的路由选择，要寻找最佳路由是很不现实的。")]),_._v(" "),t("li",[_._v("自治系统之间的路由选择必须考虑有关策略。")])]),_._v(" "),t("p",[_._v("边界网关协议（BGP）只能力求寻找一条能够到达目的网络且比较好的路由（不能兜圈子），而并非寻找一条最佳路由。BGP 采用的是路径向量路由选择协议，它与距离向量协议和链路状态协议有很大的区别。BGP 是应用层协议，它是基于 TCP 的。")]),_._v(" "),t("p",[_._v("BGP 的工作原理如下：每个自治系统的管理员要选择至少一个路由器（可以有多个）作为该自治系统的“BGP 发言人”。一个 BGP 发言人与其他自治系统中的 BGP 发言人要交换路由信息，就要先建立 TCP 连接（可见 BGP 报文是通过 TCP 传送的，也就是说 BGP 报文是 TCP 报文的数据部分），然后在此连接上交换 BGP 报文以建立 BGP 会话，再利用 BGP 会话交换路由信息。当所有 BGP 发言人都相互交换网络可达性的信息后，各 BGP 发言人就可找出到达各个自治系统的较好路由。")]),_._v(" "),t("p",[_._v("每个 BGP 发言人除必须运行 BGP 外，还必须运行该 AS 所用的内部网关协议，如 OSPF 或 RIP。BGP 所交换的网络可达性信息就是要到达某个网络（用网络前缀表示）所要经过的一系列 AS。")]),_._v(" "),t("p",[_._v("BGP 的特点如下")]),_._v(" "),t("ol",[t("li",[_._v("BGP 交换路由信息的结点数量级是自治系统的数量级，要比这些自治系统中的网络数少很多。")]),_._v(" "),t("li",[_._v("每个自治系统中 BGP 发言人（或边界路由器）的数目是很少的。这样就使得自治系统之间的路由选择不致过分复杂。")]),_._v(" "),t("li",[_._v("BGP 支持 CIDR，因此 BGP 的路由表也就应当包括目的网络前缀、下一跳路由器，以及到达该目的网络所要经过的各个自治系统序列。")]),_._v(" "),t("li",[_._v("在 BGP 刚运行时，BGP 的邻站交换整个 BGP 路由表，但以后只需在发生变化时更新有变化的部分。这样做对节省网络带宽和减少路由器的处理开销都有好处。")])]),_._v(" "),t("p",[_._v("BGP-4 共使用 4 种报文 ∶")]),_._v(" "),t("ol",[t("li",[_._v("打开（Open）报文。用来与相邻的另一个 BGP 发言人建立关系。")]),_._v(" "),t("li",[_._v("更新（Update）报文。用来发送某一路由的信息，以及列出要撤销的多条路由。")]),_._v(" "),t("li",[_._v("保活（Keepalive）报文。用来确认打开报文并周期性地证实邻站关系。")]),_._v(" "),t("li",[_._v("通知（Notification）报文。用来发送检测到的差错。")])]),_._v(" "),t("p",[_._v("RIP、OSPF 与 BGP 的比较如表所示。")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[_._v("协 议")]),_._v(" "),t("th",{staticStyle:{"text-align":"center"}},[_._v("RIP")]),_._v(" "),t("th",{staticStyle:{"text-align":"center"}},[_._v("OSPF")]),_._v(" "),t("th",{staticStyle:{"text-align":"center"}},[_._v("BGP")])])]),_._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("类型")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("内部")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("内部")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("外部")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("路由算法")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("距离-向量")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("链路状态")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("路径-向量")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("传递协议")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("UDP")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("IP")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("TCP")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("路径选择")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("跳数最少")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("代价最低")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("较好，非最佳")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("交换结点")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("和本结点相邻的路由器")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("网络中所有的路由器")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("和本结点相邻的路由器")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("交换内容")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("当前本路由器知道的全部信息，即自己的路由表")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("与本路由器相邻的所有路由器的链路状态")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("首次，整个路由表"),t("br"),_._v("非首次，有变化的部分")])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);