(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{516:function(t,e,r){"use strict";r.r(e);var n=r(26),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("ul",[r("li",[r("a",{attrs:{href:"http://c.biancheng.net/design_pattern/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 设计模式：23 种设计模式全面解析（超级详细）"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.runoob.com/design-pattern/design-pattern-intro.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://design-patterns.readthedocs.io/zh_CN/latest/index.html#",target:"_blank",rel:"noopener noreferrer"}},[t._v("图说设计模式"),r("OutboundLink")],1)])]),t._v(" "),r("p",[t._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),t._v(" "),r("p",[t._v("设计模式是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。它不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。")]),t._v(" "),r("h2",{attrs:{id:"background"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[t._v("#")]),t._v(" Background")]),t._v(" "),r("p",[t._v("“设计模式”这个术语最初并不是出现在软件设计中，而是被用于建筑领域的设计中。")]),t._v(" "),r("p",[t._v("1977 年，美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任克里斯托夫·亚历山大（Christopher Alexander）在他的著作《建筑模式语言：城镇、建筑、构造（A Pattern Language: Towns Building Construction）中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。")]),t._v(" "),r("p",[t._v("1979 年他的另一部经典著作《建筑的永恒之道》（The Timeless Way of Building）进一步强化了设计模式的思想，为后来的建筑设计指明了方向。")]),t._v(" "),r("p",[t._v("1987 年，肯特·贝克（Kent Beck）和沃德·坎宁安（Ward Cunningham）首先将克里斯托夫·亚历山大的模式思想应用在 Smalltalk 中的图形用户接口的生成中，但没有引起软件界的关注。")]),t._v(" "),r("p",[t._v("直到 1990 年，软件工程界才开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。")]),t._v(" "),r("p",[t._v("1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》（Design Patterns: Elements of Reusable Object-Oriented Software）一书，在本教程中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）匿名著称。")]),t._v(" "),r("h2",{attrs:{id:"gof"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gof"}},[t._v("#")]),t._v(" GOF")]),t._v(" "),r("p",[t._v("1995 年，GoF（Gang of Four，四人组/四人帮）合作出版了《设计模式：可复用面向对象软件的基础》一书，共收录了 23 种设计模式，从此树立了软件设计模式领域的里程碑，人称「GoF 设计模式」。")]),t._v(" "),r("p",[t._v("他们所提出的设计模式主要是基于以下的面向对象设计原则。")]),t._v(" "),r("ul",[r("li",[t._v("对接口编程而不是对实现编程。")]),t._v(" "),r("li",[t._v("优先使用对象组合而不是继承。")])]),t._v(" "),r("h2",{attrs:{id:"concept-and-meaning-of-software-design-pattern"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#concept-and-meaning-of-software-design-pattern"}},[t._v("#")]),t._v(" Concept and meaning of software design pattern")]),t._v(" "),r("h3",{attrs:{id:"the-concept-of-software-design-patterns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-concept-of-software-design-patterns"}},[t._v("#")]),t._v(" The concept of software design patterns")]),t._v(" "),r("p",[t._v("软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。")]),t._v(" "),r("h3",{attrs:{id:"the-significance-of-learning-design-patterns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-significance-of-learning-design-patterns"}},[t._v("#")]),t._v(" The significance of learning design patterns")]),t._v(" "),r("p",[t._v("设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。\n可以提高程序员的思维能力、编程能力和设计能力。\n使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。\n使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。")]),t._v(" "),r("p",[t._v("当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，可能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。")]),t._v(" "),r("h2",{attrs:{id:"types-of-design-patterns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#types-of-design-patterns"}},[t._v("#")]),t._v(" Types of design patterns")]),t._v(" "),r("h3",{attrs:{id:"according-to-purpose"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#according-to-purpose"}},[t._v("#")]),t._v(" According to purpose")]),t._v(" "),r("p",[t._v("根据模式是用来完成什么工作来划分，这种方式可分为"),r("strong",[t._v("创建型模式")]),t._v("、"),r("strong",[t._v("结构型模式")]),t._v("和"),r("strong",[t._v("行为型模式")]),t._v(" 3 种。")]),t._v(" "),r("p",[r("strong",[t._v("1. 创建型模式")])]),t._v(" "),r("p",[t._v("这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。")]),t._v(" "),r("ul",[r("li",[t._v("工厂模式（Factory Pattern）")]),t._v(" "),r("li",[t._v("抽象工厂模式（Abstract Factory Pattern）")]),t._v(" "),r("li",[t._v("单例模式（Singleton Pattern）")]),t._v(" "),r("li",[t._v("建造者模式（Builder Pattern）")]),t._v(" "),r("li",[t._v("原型模式（Prototype Pattern）")])]),t._v(" "),r("p",[r("strong",[t._v("2. 结构型模式")])]),t._v(" "),r("p",[t._v("这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。")]),t._v(" "),r("ul",[r("li",[t._v("适配器模式（Adapter Pattern）")]),t._v(" "),r("li",[t._v("桥接模式（Bridge Pattern）")]),t._v(" "),r("li",[t._v("过滤器模式（Filter、Criteria Pattern）")]),t._v(" "),r("li",[t._v("组合模式（Composite Pattern）")]),t._v(" "),r("li",[t._v("装饰器模式（Decorator Pattern）")]),t._v(" "),r("li",[t._v("外观模式（Facade Pattern）")]),t._v(" "),r("li",[t._v("享元模式（Flyweight Pattern）")]),t._v(" "),r("li",[t._v("代理模式（Proxy Pattern）")])]),t._v(" "),r("p",[r("strong",[t._v("行为型模式")])]),t._v(" "),r("p",[t._v("这些设计模式特别关注对象之间的通信。")]),t._v(" "),r("ul",[r("li",[t._v("责任链模式（Chain of Responsibility Pattern）")]),t._v(" "),r("li",[t._v("命令模式（Command Pattern）")]),t._v(" "),r("li",[t._v("解释器模式（Interpreter Pattern）")]),t._v(" "),r("li",[t._v("迭代器模式（Iterator Pattern）")]),t._v(" "),r("li",[t._v("中介者模式（Mediator Pattern）")]),t._v(" "),r("li",[t._v("备忘录模式（Memento Pattern）")]),t._v(" "),r("li",[t._v("观察者模式（Observer Pattern）")]),t._v(" "),r("li",[t._v("状态模式（State Pattern）")]),t._v(" "),r("li",[t._v("空对象模式（Null Object Pattern）")]),t._v(" "),r("li",[t._v("策略模式（Strategy Pattern）")]),t._v(" "),r("li",[t._v("模板模式（Template Pattern）")]),t._v(" "),r("li",[t._v("访问者模式（Visitor Pattern）")])]),t._v(" "),r("h3",{attrs:{id:"according-to-scope"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#according-to-scope"}},[t._v("#")]),t._v(" According to scope")]),t._v(" "),r("p",[t._v("根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为"),r("strong",[t._v("类模式")]),t._v("和"),r("strong",[t._v("对象模式")]),t._v("两种。")]),t._v(" "),r("ul",[r("li",[t._v("类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF 中的工厂方法、（类）适配器、模板方法、解释器属于该模式。")]),t._v(" "),r("li",[t._v("对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式。")])])])}),[],!1,null,null,null);e.default=a.exports}}]);