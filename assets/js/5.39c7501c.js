(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{483:function(_,v,t){_.exports=t.p+"assets/img/osi_layer_model_structure.92d636eb.png"},484:function(_,v,t){_.exports=t.p+"assets/img/iso_osi_rf_communication_process1.3d11a5b8.png"},485:function(_,v,t){_.exports=t.p+"assets/img/iso_osi_rf_communication_process2.9146c8b9.png"},486:function(_,v,t){_.exports=t.p+"assets/img/osirf_tcpiprf.689d3ff5.png"},487:function(_,v,t){_.exports=t.p+"assets/img/5layer_rf_encapsulation_unencapsulation.81fc0db4.png"},588:function(_,v,t){"use strict";t.r(v);var e=t(26),r=Object(e.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h2",{attrs:{id:"计算机网络分层结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络分层结构"}},[_._v("#")]),_._v(" 计算机网络分层结构")]),_._v(" "),e("p",[_._v("计算机网络体系结构简称网络体系结构（Network Architecture），是分层结构（Layered Architecture），计算机网络体系结构是从"),e("strong",[_._v("功能上")]),_._v("描述计算机网络结构")]),_._v(" "),e("p",[_._v("两个系统中实体间的通信是一个很复杂的过程，为了降低协议设计和调试过程的复杂性，也为了方便对于网络进行研究、实现和维护，促进标准化工作，通常对计算机网络的体系结构以"),e("strong",[_._v("分层")]),_._v("的方式进行建模。")]),_._v(" "),e("p",[_._v("我们把计算机网络的各层及其"),e("strong",[_._v("协议")]),_._v("的集合称为网络的体系结构。换言之，计算机的网络体系结构就是这个计算机网络及其所完成的功能的精确定义，它是计算机网络中层次、各层的协议及层间接口的集合。需要强调的是，这些功能究竟是用何种硬件或软件完成的，则是一个遵循这种体系结构的实现（Implementation）问题。体系结构是"),e("strong",[_._v("抽象")]),_._v("的，而实现是具体的，是真正在运行的计算机硬件和软件。")]),_._v(" "),e("p",[_._v("计算机网络体系结构通常都具有可分层的特性，它将负责的大系统分成若干较容易实现的层次。分层的基本原则如下：")]),_._v(" "),e("ol",[e("li",[_._v("每层都实现一种相对独立的功能，降低大系统的复杂度")]),_._v(" "),e("li",[_._v("各层之间界面自然清晰，易于理解，相互交流尽可能少")]),_._v(" "),e("li",[_._v("各层功能的精确定义独立于具体的实现方法，可以采用最合适的技术来实现")]),_._v(" "),e("li",[_._v("保持下层对上层的独立性，上层单向使用下层提供的服务")]),_._v(" "),e("li",[_._v("整个分层结构应能促进标准化工作")])]),_._v(" "),e("p",[_._v("由于分层后各层之间相对独立，灵活性好，因而分层的体系结构易于更新（替换单个模块），易于调试，易于交流，易于抽象，易于标准化。但层次越多，有些功能在不同层中难免重复出现，产生额外的开销，导致整体运行效率越低。层次越少，就会使每层的协议太复杂。因此，在分层时应考虑层次的清晰程度与运行效率间的折中、层次数量的折中。")]),_._v(" "),e("p",[_._v("依据一定的规则，将分层后的网络从底层到高层依次称为第 1 层、第 2 层……第 n 层，通常还为每层取一个特定的名称，如第一层的名称称为"),e("em",[_._v("物理层")])]),_._v(" "),e("p",[_._v("在计算机网络分层结构中，第 n 层中的活动元素通常称为 第 n 层实体。具体来说，"),e("strong",[_._v("实体")]),_._v("指任何可以发送或接收信息的硬件或软件进程，通常是一个特定的软件模块。不同机器上的同一层称为对等层，同一层的实体称为对等层实体。n 层实体实现的服务为 n + 1 层所利用。在这种情况下，n 层被称为服务提供者（Service Provider）， n + 1 层则称为服务用户（Service User）。")]),_._v(" "),e("p",[_._v("实体一般指跟网络交互有关的，遵守协议的内容，运行中的软件或硬件模块")]),_._v(" "),e("p",[_._v("具体地，层次结构的含义包括以下几个方面：")]),_._v(" "),e("ul",[e("li",[_._v("第 n 层的实体不仅要使用第 n - 1 层的服务来实现自身定义的功能，还要向第 n + 1 层提供本层的服务，"),e("strong",[_._v("该服务是第 n 层及其下面各层提供的服务总和。")])]),_._v(" "),e("li",[_._v("最低层只提供服务，是整个层次结构的基础；中间各层既是下一层的服务使用者，又是上一层的服务提供者；最高层面向用户提供服务。")]),_._v(" "),e("li",[_._v("上一层只能通过相邻层间的接口使用下一层的服务，而不能调用其他层次的服务；下一层所提供服务的实现细节对上一层透明。")]),_._v(" "),e("li",[_._v("两台主机通信时，对等层在逻辑上有一条直接信道，表现为不经过下层就把信息传送到对方。")])]),_._v(" "),e("h2",{attrs:{id:"数据单元-du"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据单元-du"}},[_._v("#")]),_._v(" 数据单元（DU）")]),_._v(" "),e("p",[_._v("在计算机网络体系结构的各个层次中，每个报文都分为两个部分：一是数据部分，即 SDU；二是控制信息部分，即 PCI，他们共同组成 PDU。")]),_._v(" "),e("ul",[e("li",[_._v("服务数据单元（Service Data Unit, SDU）：为完成用户所要求的功能而应传送的数据。第 n 层的服务数据单元记为 n-SDU。")]),_._v(" "),e("li",[_._v("协议控制信息（Protocol Control Information, PCI）：控制协议操作的信息。第 n 层的协议控制信息记为 n-PCI。")]),_._v(" "),e("li",[_._v("协议数据单元（Protocol Data Unit, PDU）：对等层次之间传送的数据单元称为该层的 PDU。第 n 层的协议数据单元记为 n-PDU。")])]),_._v(" "),e("p",[_._v("在各层间传输数据时，把从第 n + 1 层收到的 PDU 作为 第 n 层的 SDU，加上第 n 层的 PCI，就变成了第 n 层的 PDU，交给第 n - 1 层后作为 SDU 发送，接收方接受时做相反的处理。因此可知三者的关系为 "),e("code",[_._v("n-SDU + n-PCI = n-PDU = (n-1)-SDU")])]),_._v(" "),e("h3",{attrs:{id:"控制信息组成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制信息组成"}},[_._v("#")]),_._v(" 控制信息组成")]),_._v(" "),e("p",[_._v("控制信息主要包括：")]),_._v(" "),e("ul",[e("li",[_._v("地址（Address）：标识发送端和接收端")]),_._v(" "),e("li",[_._v("差错检测编码（Error-detecting code）：用于差错检测或纠正\n注：并不是所有协议都有差错检测编码")]),_._v(" "),e("li",[_._v("协议控制（Protocol control）：实现协议功能的附加信息，如：优先级（Priority）、服务质量（QoS）和安全控制灯光。")])]),_._v(" "),e("h3",{attrs:{id:"各层次的协议数据单元"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#各层次的协议数据单元"}},[_._v("#")]),_._v(" 各层次的协议数据单元")]),_._v(" "),e("p",[_._v("在实际的网络中，每层的协议数据单元都有一个通俗的名称。")]),_._v(" "),e("ul",[e("li",[_._v("应用层：报文(message)")]),_._v(" "),e("li",[_._v("传输层：报文段(segment)：TCP 段，UDP 数据报")]),_._v(" "),e("li",[_._v("网络层：分组 packet（如果无连接方式：数据报 datagram）")]),_._v(" "),e("li",[_._v("数据链路层：帧或数据帧（frame）")]),_._v(" "),e("li",[_._v("物理层：位或比特（bit）")])]),_._v(" "),e("h2",{attrs:{id:"计算机网络协议、接口、服务的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络协议、接口、服务的概念"}},[_._v("#")]),_._v(" 计算机网络协议、接口、服务的概念")]),_._v(" "),e("h3",{attrs:{id:"协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协议"}},[_._v("#")]),_._v(" 协议 "),e("div",{attrs:{id:"protocol"}})]),_._v(" "),e("p",[_._v("Refer to "),e("RouterLink",{attrs:{to:"/pages/0531c4/#computer_network_composition"}},[_._v("协议（Protocol）")])],1),_._v(" "),e("p",[_._v("协议，就是规则的集合。在网络中要做到有条不紊地交换数据，就必须遵循一些事先约定好的规则。这些规则明确规定了所交换的数据的格式及有关的同步问题。这些为进行网络中的数据交换而建立的规则、标准或约定称为网络协议（Network Protocol），它是控制两个（或多个）对等实体（peer entity）进行通信的规则的集合，是水平的。不对等实体之间是没有协议的，比如用 TCP/IP 协议栈通信的两个结点，结点 A 的传输层和结点 B 的传输层之间存在协议，但结点 A 的传输层和结点 B 的网络层之间不存在协议。网络协议也简称为协议。")]),_._v(" "),e("p",[_._v("协议由语法、语义和同步三部分组成。语法规定了传输数据的格式；语义规定了所需要完成的功能，即需要发出何种控制信息、完成何种动作及作出何种应答；同步规定了执行各种操作的条件、时序关系等，即事件实现顺序的详细说明。一个完整的协议通常应具有线路管理（建立、释放连接）、差错控制、数据转换等功能。")]),_._v(" "),e("h3",{attrs:{id:"接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[_._v("#")]),_._v(" 接口")]),_._v(" "),e("p",[_._v("接口是同一结点内相邻两层之间交换信息的连接点，是一个系统内部的规定。每层只能为紧邻的层次之间定义接口，不能跨层定义接口。在典型的接口上，同一结点相邻两层的实体通过服务访问点 SAP（Service Access Ponit）进行交互。服务是通过 SAP 提供上层使用的，第 n 层的 SAP 就是第 n + 1 层可以访问第 n 层服务的地方。每个 SAP 都有一个能够标识它的地址。SAP 是一个抽象的概念，它实际上是一个逻辑接口（类似于邮政信箱），但和通常所说的两个设备之间的硬件接口是很不一样的。")]),_._v(" "),e("h3",{attrs:{id:"服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务"}},[_._v("#")]),_._v(" 服务")]),_._v(" "),e("p",[_._v("服务是指下层为紧邻的上层提过功能的调用，它是垂直的。对等实体在协议的控制下，使得本层能为上一层提供服务，但是实现本层协议还需要使用下一层所提供的服务。")]),_._v(" "),e("p",[_._v("上层使用下层所提供的服务时必须与下层交换一些命令，这些命令在 OSI 中称为服务原语。OSI 将原语（Primitive）划分为 4 类。")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("请求（Request）")]),_._v("。由服务用户发往服务提供者，请求完成某项工作。")]),_._v(" "),e("li",[e("code",[_._v("指示（Indication）")]),_._v("。由服务提供者发往服务用户，提示用户做某件事情。")]),_._v(" "),e("li",[e("code",[_._v("响应（Response）")]),_._v("。由服务用户发往服务提供者，作为对指示的响应。")]),_._v(" "),e("li",[e("code",[_._v("证实（Confirmation）")]),_._v("。由服务提供者发往服务用户，作为对请求的证实。")])]),_._v(" "),e("p",[_._v("这 4 类原语用于不同的功能，如建立连接、传输数据和断开连接等。有应答服务包括全部 4 类原语，而无应答服务则只有请求和指示两类原语。")]),_._v(" "),e("p",[_._v("一定要注意，协议和服务在概念上是不一样的。首先，只有本次协议的实现才能保证向上一层提供服务。本层的服务用户只能看见服务而无法看见下面的协议，即下面的协议对上层的服务用户是透明的。其次，协议是水平的，即协议是控制对等实体之间通信的规则。但服务是垂直的，即服务由下层通过层间接口向上层提供的。另外，并非在一层内完成的全部功能都成为服务，只有那些能够被高一层实体"),e("strong",[_._v("看得见")]),_._v("的功能才称为服务。")]),_._v(" "),e("p",[_._v("本层的服务：借助下层服务实现的本层协议实体之间交互带来的新功能（上层可以利用的）+ 更下层所提供的服务")]),_._v(" "),e("h3",{attrs:{id:"服务的分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务的分类"}},[_._v("#")]),_._v(" 服务的分类")]),_._v(" "),e("p",[e("strong",[_._v("1. 面向连接服务和无连接服务")])]),_._v(" "),e("p",[_._v("在面向连接服务（Connection-oriented Service）中，通信前双方必须先建立连接，分配相应的资源（如缓冲区），以保证通信能正常进行，传输结束后释放连接和所占用的资源。因此这种服务可以分为建立连接、数据传输、连接释放三个阶段。例如 TCP 就是一种面向连接服务的协议。")]),_._v(" "),e("p",[_._v("在无连接服务（Connectionless Service）中，通信前双方不需要先建立连接，需要发送数据时可直接发送，把每个带有目的地址的包（报文分组）传送到线路上，有系统选定线路进行传输。这是一种不可靠的服务。这种服务常被描述为"),e("em",[_._v("尽最大努力交付（Best-Effort-Delivery）")]),_._v("， 它并不保证通信的可靠性。例如 IP、UDP 就是无连接服务的协议。")]),_._v(" "),e("p",[e("strong",[_._v("2. 可靠服务和不可靠服务")])]),_._v(" "),e("p",[_._v("可靠服务是指网络具有纠错、检错、应答机制，能保证数据正确、可靠地传送到目的地。"),e("br"),_._v("\n不可靠服务是指网络只是尽量正确、可靠地传送，而不能保证数据正确、可靠地传送到目的地，是一种尽力而为的服务。")]),_._v(" "),e("p",[_._v("对于提高不可靠服务的网络，其网络的正确性、可靠性要由应用或用户来保障。例如，用户收到信息后要判断信息的正确性，如果不正确，那么用户要把出错信息报告给信息的发送者，以便发送者采取纠正措施。通过用户的这些措施，可以把不可靠的服务变为可靠地服务。")]),_._v(" "),e("p",[e("strong",[_._v("3. 有应答服务和无应答服务")])]),_._v(" "),e("p",[_._v("有应答服务是指接收方在接收到数据后向发送方给出相应的应答，该应答由传输系统内部自动实现，而不由用户实现。所发送的应答既可以是肯定应答，也可以是否定应答，通常在就收到的数据有错误时发送否定应答。例如，文件传输服务就是一种有应答服务。")]),_._v(" "),e("p",[_._v("无应答服务是指接收方收到数据后不自动给出应答。若需要应答，则由高层实现。例如，对于 WWW 服务，客户端收到服务器发送的页面文件后不给出应答。")]),_._v(" "),e("h2",{attrs:{id:"iso-osi-参考模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iso-osi-参考模型"}},[_._v("#")]),_._v(" ISO/OSI 参考模型")]),_._v(" "),e("p",[_._v("OSI 模型，即开放式系统互联参考模型（Open Systerm Interconnection Reference Model,OSI/RM），是国际标准化组织（International Organization for Standardization,ISO）提出的一个试图是各种计算机或者通信系统在世界范围内互联为网络的标准框架。整个模型分为七层，自下而上依次为物理层，数据链路层，网络层，传输层，会话层，表示层，应用层。")]),_._v(" "),e("p",[_._v("低三层统称为通信子网，它是为了联网而附加的通信设备，完成数据传输的功能；高三层统称为资源子网，它相当于计算机系统，完成数据的处理等功能。传输层承上启下。")]),_._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[_._v("Click me to view the OSI layer model structure")]),_._v(" "),e("p",[e("img",{attrs:{src:t(483),alt:"OSI layer model structure"}})])]),_._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[_._v("Click me to view ISO/OSI reference model communication process")]),_._v(" "),e("p",[e("img",{attrs:{src:t(484),alt:"ISO/OSI reference model communication process1"}})]),_._v(" "),e("p",[e("img",{attrs:{src:t(485),alt:"ISO/OSI reference model communication process2"}})])]),_._v(" "),e("h3",{attrs:{id:"物理层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#物理层"}},[_._v("#")]),_._v(" 物理层")]),_._v(" "),e("p",[_._v("物理层（Physical Layer）定义物理设备的标准，主要对物理连接方式，电气特性，机械特性等制定统一标准，传输比特流，因此最小的传输单位是位（比特流）")]),_._v(" "),e("p",[_._v("在线路上传送 bit")]),_._v(" "),e("p",[_._v("传输层所利用的一些物理媒体，如双绞线、光缆、无线信道等，并不在物理层协议之内而是在物理层协议下面。因此，有人把物理媒体当做第 0 层。")]),_._v(" "),e("ul",[e("li",[_._v("接口特性：机械特性、电气特性、功能特性、规程特性")]),_._v(" "),e("li",[_._v("比特编码")]),_._v(" "),e("li",[_._v("数据率")]),_._v(" "),e("li",[_._v("比特同步：时钟同步")]),_._v(" "),e("li",[_._v("传输模式\n"),e("ul",[e("li",[_._v("单工（Simplex）:传统的电视，电视台发什么信号，我们就接收什么信号，单向传输")]),_._v(" "),e("li",[_._v("半双工（half-duplex）： E.g. 对讲机, 一步对讲机在同一时间内要么听要么说，不可能一边听一边说")]),_._v(" "),e("li",[_._v("全双工（full-deplex）")])])])]),_._v(" "),e("h3",{attrs:{id:"数据链路层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据链路层"}},[_._v("#")]),_._v(" 数据链路层")]),_._v(" "),e("p",[_._v("数据链路层（Data Link Layer）将网络层传来的 IP 数据包组装成帧。")]),_._v(" "),e("p",[_._v("主要是对物理层传输的比特流包装，检测保证数据传输的可靠性，将物理层接收的数据进行 MAC（媒体访问控制）地址的封装和解封装，也可以简单的理解为物理寻址。交换机就处在这一层，最小的传输单位——帧")]),_._v(" "),e("p",[_._v("相邻网络节点间的数据传输"),e("br"),_._v("\n2 个相邻 2 点的通信，点到点通信，可靠或不可靠"),e("br"),_._v("\n数据链路层的协议有点对对协议 PPP, 802.11(wifi), Ethernet 等")]),_._v(" "),e("ul",[e("li",[_._v("负责结点-结点（node-to-node）数据传输")]),_._v(" "),e("li",[_._v("组帧（Framing），加头加尾")]),_._v(" "),e("li",[_._v("物理寻址（physical addressing），在帧头中增加发送端和/或接收端的物理地址标识数据帧的发送端和/或接收端")]),_._v(" "),e("li",[_._v("流量控制（Flow control），避免淹没接收端")]),_._v(" "),e("li",[_._v("差错控制（Error control），检测并重传损坏或丢失帧，并避免重复帧")]),_._v(" "),e("li",[_._v("访问（接入）控制（Access control），在任意给定时刻决定哪个设备拥有链路（物理介质）控制使用权")])]),_._v(" "),e("h3",{attrs:{id:"网络层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[_._v("#")]),_._v(" 网络层")]),_._v(" "),e("p",[_._v("网络层（Network Layer），将网络层的协议数据单元（分组）从源端传到目的端，为分组交换网上的不同主机提供通信服务。")]),_._v(" "),e("p",[_._v("控制子网的运行，如逻辑编址，分组传输，路由选择最小单位——分组（包）/数据报")]),_._v(" "),e("p",[_._v("为数据报从源到目的选择路由"),e("br"),_._v("\n主机主机之间的通信，端到端通信，不可靠"),e("br"),_._v("\n网络层协议有 IP, 路由协议等。")]),_._v(" "),e("ul",[e("li",[_._v("负责源主机到目的主机数据分组（packet）交付，可能穿越多个网络")]),_._v(" "),e("li",[_._v("逻辑寻址（Logical addressing），全局唯一的逻辑地址，确保数据分组被送达目的主机，如 IP 地址")]),_._v(" "),e("li",[_._v("路由（Routing）\n"),e("ul",[e("li",[_._v("路由器（或网关）互连网络，并路由分组至最终目的主机")]),_._v(" "),e("li",[_._v("路径选择")])])]),_._v(" "),e("li",[_._v("分组转发")])]),_._v(" "),e("h3",{attrs:{id:"传输层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传输层"}},[_._v("#")]),_._v(" 传输层")]),_._v(" "),e("p",[_._v("传输层（Transport Layer）也称运输层，传输单位是报文段（TCP）或用户数据报（UDP），传输层主要负责主机中两个进程之间的通信，功能是为端到端连接提供可靠地的传输服务，为端到端连接提供流量控制、差错控制、服务质量、数据传输管理等服务。")]),_._v(" "),e("p",[_._v("数据链路层提供的是点到点的通信，传输层提供的是端到端的通信。点到点可以理解为主机到主机之间的通信，一个点是指一个硬件地址或 IP 地址，网络中参与通信的主机是通过硬件地址或 IP 地址标识的；端到端的通信是指运行在不同主机内的两个进程之间的通信，一个进程由一个端口来标识，所以称端到端通信。")]),_._v(" "),e("p",[_._v("定义一些传输数据的协议和端口。传输协议同时进行流量控制，或是根据接收方接收数据的快慢程度，规定适当的发送速率，解决传输效率及能力的问题——tpdu")]),_._v(" "),e("p",[_._v("主机之间的数据传输"),e("br"),_._v("\n在网络层提供的端到端通信基础上，细分为进程到进程，将不可靠的通信变成可靠地通信"),e("br"),_._v("\n传输层协议有 TCP, UDP 等。")]),_._v(" "),e("ul",[e("li",[_._v("负责源-目的（端-端）（进程间）完整报文传输")]),_._v(" "),e("li",[_._v("分段与重组")]),_._v(" "),e("li",[_._v("SAP 寻址\n"),e("ul",[e("li",[_._v("确保将完整报文提交给正确的进程，如端口号")])])]),_._v(" "),e("li",[_._v("连接控制")]),_._v(" "),e("li",[_._v("流量控制")]),_._v(" "),e("li",[_._v("差错控制")])]),_._v(" "),e("h3",{attrs:{id:"会话层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#会话层"}},[_._v("#")]),_._v(" 会话层")]),_._v(" "),e("p",[_._v("会话层（Session Layer）负责在网络中的两节点之间建立，维持和终止通信，在这层协议中，解决节点链接的协调和管理问题\n会话层的功能包括：建立通信链接，保持会话过程通信连接的畅通。同步两个节点之间的对话，决定通信是否被中断以及通信中断时决定从何处重新发送。当通过拨号向你的 ISP（因特网服务提供商）请求链接到因特网时，ISP 服务器上的层就会向你与你的 PC 客户机上的会话层进行协商链接。若你的电话线偶然从墙上插孔脱落，你终端机上的会话层将检测到链接中断并重新发起链接。会话层通过决定节点通信的优先级和通信市场来设置通信期限")]),_._v(" "),e("p",[_._v("最小单位——spdu")]),_._v(" "),e("p",[_._v("数据交换的同步，检查点，恢复")]),_._v(" "),e("ul",[e("li",[_._v("对话控制（dialog controlling），建立、维护")]),_._v(" "),e("li",[_._v("同步（synchronization），在数据流中插入“同步点”")]),_._v(" "),e("li",[_._v("最“薄”的一层，在实际的网络中，是不单独存在的，就是说没有这一层")])]),_._v(" "),e("h3",{attrs:{id:"表示层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表示层"}},[_._v("#")]),_._v(" 表示层")]),_._v(" "),e("p",[_._v("表示层（Presentation Layer）主要处理在两个通信系统中交换信息的表示方式。不同机器采用的编码和表示方式不同，使用的数据结构也不同，为了使不同表示方法的数据和信息之间能互相交换，表示层采用抽样的标准方法定义数据结构，并采用标准的编码形式。数据压缩、加密和解密也是表示层可提供的数据表示变换功能。")]),_._v(" "),e("p",[_._v("表示层是应用程序和网络之间的翻译官。在表示层，数据需要按照网络所能理解的方案的进行格式化。这种格式化因为使用网络的类型的不同而不同。表示层管理数据的加密和解密，例如银行账户，账户数据发送前加密，接受的时候对账户进行解密。")]),_._v(" "),e("ul",[e("li",[_._v("允许应用解释传输的数据, e.g., 加密，压缩，机器相关的表示转换")])]),_._v(" "),e("h3",{attrs:{id:"应用层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[_._v("#")]),_._v(" 应用层")]),_._v(" "),e("p",[_._v("应用层（Application Layer）是 OSI 模型的最高层，是用户与网络的界面。应用层为特定类型的网络应用提供访问 OSI 环境的手段。因为用户的实际应用多种多样，这就要求应用层采用不同的应用协议来解决不同类型的应用要求，因此应用层是最复杂的一层，使用的协议也许多。")]),_._v(" "),e("ul",[e("li",[_._v("为人类用户或者其他应用进程提供网络应用服务")]),_._v(" "),e("li",[_._v("应用层协议有 FTP, SMTP, HTTP,DNS 等。")])]),_._v(" "),e("h2",{attrs:{id:"tcp-ip-参考模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip-参考模型"}},[_._v("#")]),_._v(" TCP/IP 参考模型")]),_._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[_._v("Click me to view ISO/OSI reference model and TCP/IP reference model")]),_._v(" "),e("p",[e("img",{attrs:{src:t(486),alt:"ISO/OSI reference model and TCP/IP reference model"}})])]),_._v(" "),e("h3",{attrs:{id:"iso-osi-与-tcp-ip-的不同点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iso-osi-与-tcp-ip-的不同点"}},[_._v("#")]),_._v(" ISO/OSI 与 TCP/IP 的不同点")]),_._v(" "),e("ol",[e("li",[_._v("OSI 定义三点：服务、协议、接口")]),_._v(" "),e("li",[_._v("OSI 先出现，参考模型先于协议发明，不偏向特定协议")]),_._v(" "),e("li",[_._v("TCP/IP 设计之初就考虑到异构网络互联问题，将 IP 作为重要层次，IP 可为各式各样的应用程序提供服务（Everything over IP）")]),_._v(" "),e("li",[_._v("参照下方表格")])]),_._v(" "),e("table",[e("thead",[e("tr",[e("th"),_._v(" "),e("th",[_._v("ISO/OSI 参考模型")]),_._v(" "),e("th",[_._v("TCP/IP 参考模型")])])]),_._v(" "),e("tbody",[e("tr",[e("td",[_._v("网络层")]),_._v(" "),e("td",[_._v("无连接 + 面向连接")]),_._v(" "),e("td",[_._v("无连接")])]),_._v(" "),e("tr",[e("td",[_._v("传输层")]),_._v(" "),e("td",[_._v("面向连接")]),_._v(" "),e("td",[_._v("无连接 + 面向连接")])])])]),_._v(" "),e("h2",{attrs:{id:"_5-层参考模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-层参考模型"}},[_._v("#")]),_._v(" 5 层参考模型")]),_._v(" "),e("p",[_._v("综合了 OSI 和 TCP/IP 的优点")]),_._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[_._v("Click me to view Data encapsulation and decapsulation of 5-layer reference model")]),_._v(" "),e("p",[e("img",{attrs:{src:t(487),alt:"Data encapsulation and decapsulation of 5-layer reference model"}})])])])}),[],!1,null,null,null);v.default=r.exports}}]);